webpackHotUpdate("the-happy-programmer",{

/***/ "./packages/thp-theme/src/components /home.js":
/*!****************************************************!*\
  !*** ./packages/thp-theme/src/components /home.js ***!
  \****************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var core_js_modules_es_symbol_description_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! core-js/modules/es.symbol.description.js */ \"./node_modules/core-js/modules/es.symbol.description.js\");\n/* harmony import */ var core_js_modules_es_symbol_description_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_symbol_description_js__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var core_js_modules_es_array_iterator_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! core-js/modules/es.array.iterator.js */ \"./node_modules/core-js/modules/es.array.iterator.js\");\n/* harmony import */ var core_js_modules_es_array_iterator_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_array_iterator_js__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var core_js_modules_web_dom_collections_iterator_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! core-js/modules/web.dom-collections.iterator.js */ \"./node_modules/core-js/modules/web.dom-collections.iterator.js\");\n/* harmony import */ var core_js_modules_web_dom_collections_iterator_js__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_web_dom_collections_iterator_js__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! react */ \"./node_modules/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_3__);\n/* harmony import */ var frontity__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! frontity */ \"./node_modules/frontity/dist/src/index.js\");\n/* harmony import */ var frontity__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(frontity__WEBPACK_IMPORTED_MODULE_4__);\n/* harmony import */ var _reusableComponents_buttons__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./reusableComponents/buttons */ \"./packages/thp-theme/src/components /reusableComponents/buttons.js\");\n/* harmony import */ var _frontity_components_link__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @frontity/components/link */ \"./node_modules/@frontity/components/link/index.tsx\");\n/* harmony import */ var _constants_constants_string__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./constants/constants-string */ \"./packages/thp-theme/src/components /constants/constants-string.js\");\n/* harmony import */ var _footer__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./footer */ \"./packages/thp-theme/src/components /footer.js\");\n/* harmony import */ var _reusableComponents_container__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./reusableComponents/container */ \"./packages/thp-theme/src/components /reusableComponents/container.js\");\n/* harmony import */ var _emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! @emotion/react/jsx-runtime */ \"./node_modules/@emotion/react/jsx-runtime/dist/emotion-react-jsx-runtime.browser.esm.js\");\nfunction _EMOTION_STRINGIFIED_CSS_ERROR__(){return\"You have tried to stringify object returned from `css` function. It isn't supposed to be used directly (e.g. as value of the `className` prop), but rather handed to emotion so it can handle it (e.g. as value of `css` prop).\";}const Home=({state})=>{const breakpoints=state.theme.breakpoints;return Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_10__[\"jsxs\"])(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_10__[\"Fragment\"],{children:[Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_10__[\"jsx\"])(_reusableComponents_container__WEBPACK_IMPORTED_MODULE_9__[\"default\"],{breakpoints:breakpoints,children:Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_10__[\"jsxs\"])(NavContainer,{breakpoints:breakpoints,children:[Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_10__[\"jsx\"])(\"img\",{src:_constants_constants_string__WEBPACK_IMPORTED_MODULE_7__[\"homeConstants\"].homeSvg}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_10__[\"jsxs\"])(LandingCredentials,{breakpoints:breakpoints,children:[Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_10__[\"jsx\"])(HeaderDescription,{children:_constants_constants_string__WEBPACK_IMPORTED_MODULE_7__[\"homeConstants\"].mainHeader}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_10__[\"jsxs\"])(\"p\",{children:[\"Programming blog focused on\",\" \",Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_10__[\"jsx\"])(_frontity_components_link__WEBPACK_IMPORTED_MODULE_6__[\"default\"],{link:\"/category/swiftui/\",children:\"SwiftUI\"}),\", Flutter and React Native. You can also find courses in mobile development. Clones of famous websites and Apps. Subscribe to get notified for new content.\"]}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_10__[\"jsxs\"])(Subcribe,{breakpoints:breakpoints,children:[Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_10__[\"jsx\"])(\"input\",{type:\"text\",id:\"email\",placeholder:\"example@email.com\",name:\"email\"}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_10__[\"jsx\"])(_reusableComponents_buttons__WEBPACK_IMPORTED_MODULE_5__[\"Primary\"],{children:\"Subscribe\"})]})]})]})}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_10__[\"jsx\"])(LessonContainer,{breakpoints:breakpoints,children:Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_10__[\"jsxs\"])(_reusableComponents_container__WEBPACK_IMPORTED_MODULE_9__[\"default\"],{children:[Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_10__[\"jsx\"])(\"p\",{children:_constants_constants_string__WEBPACK_IMPORTED_MODULE_7__[\"homeConstants\"].header}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_10__[\"jsx\"])(\"h3\",{children:_constants_constants_string__WEBPACK_IMPORTED_MODULE_7__[\"homeConstants\"].subheader}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_10__[\"jsx\"])(LessonContainerDiv,{breakpoints:breakpoints,children:_constants_constants_string__WEBPACK_IMPORTED_MODULE_7__[\"homeConstants\"].lessonContainer.map(([icon,title,desc])=>Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_10__[\"jsxs\"])(DescriptionPanel,{breakpoints:breakpoints,children:[Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_10__[\"jsx\"])(\"img\",{src:icon}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_10__[\"jsx\"])(\"h4\",{children:title}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_10__[\"jsx\"])(\"p\",{children:desc})]},title))})]})}),_constants_constants_string__WEBPACK_IMPORTED_MODULE_7__[\"homeConstants\"].coursesContainer.map(([icon,title,desc,link,width,disabled])=>Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_10__[\"jsxs\"])(CourseDiv,{children:[Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_10__[\"jsx\"])(\"img\",{src:icon,width:width}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_10__[\"jsx\"])(\"h2\",{children:title}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_10__[\"jsx\"])(\"p\",{children:desc}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_10__[\"jsxs\"])(ButtonContainer,{children:[Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_10__[\"jsx\"])(_reusableComponents_buttons__WEBPACK_IMPORTED_MODULE_5__[\"Primary\"],{children:\"Subcribe\"}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_10__[\"jsx\"])(_reusableComponents_buttons__WEBPACK_IMPORTED_MODULE_5__[\"Secondary\"],{disabled:disabled,children:disabled?\"Coming Soon...\":\"Read More\"})]})]},title)),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_10__[\"jsxs\"])(AuthorContainer,{children:[Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_10__[\"jsx\"])(AuthorAvatar,{children:Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_10__[\"jsx\"])(\"img\",{src:_constants_constants_string__WEBPACK_IMPORTED_MODULE_7__[\"homeConstants\"].userImage})}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_10__[\"jsx\"])(\"h2\",{children:_constants_constants_string__WEBPACK_IMPORTED_MODULE_7__[\"homeConstants\"].AuthorInfo.title}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_10__[\"jsx\"])(\"p\",{children:_constants_constants_string__WEBPACK_IMPORTED_MODULE_7__[\"homeConstants\"].AuthorInfo.description}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_10__[\"jsx\"])(SocialContainer,{breakpoints:breakpoints,children:_constants_constants_string__WEBPACK_IMPORTED_MODULE_7__[\"homeConstants\"].AuthorInfo.socials.map(([icon,link])=>Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_10__[\"jsx\"])(\"a\",{href:link,target:\"_blank\",children:Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_10__[\"jsx\"])(\"img\",{src:icon})},link))}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_10__[\"jsx\"])(_reusableComponents_buttons__WEBPACK_IMPORTED_MODULE_5__[\"Secondary\"],{children:\"Read More\"})]}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_10__[\"jsx\"])(_footer__WEBPACK_IMPORTED_MODULE_8__[\"Footer\"],{})]});};// ------------------Landing Page------------------\nconst LandingCredentials=Object(frontity__WEBPACK_IMPORTED_MODULE_4__[\"styled\"])(\"div\", false?undefined:{target:\"edqvzzy11\",label:\"LandingCredentials\"})(\"@media screen and (min-width: \",props=>props.breakpoints.tablet,\"){p{max-width:410px;}}\"+( false?undefined:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\"));const Subcribe=Object(frontity__WEBPACK_IMPORTED_MODULE_4__[\"styled\"])(\"div\", false?undefined:{target:\"edqvzzy10\",label:\"Subcribe\"})(\"display:flex;flex-direction:row;align-items:center;justify-content:center;align-content:center;width:90%;padding:1.5em 1em 0em 1em;button{padding:1rem 1rem;}input{width:40%;padding:1em 1em;border-radius:0.3em;margin:0em 0.5em;border-style:none;font-size:1rem;box-shadow:var(--hover-shadow);color:var(--text-colour);}input::placeholder{color:lightgray;opacity:1;font-family:\\\"Roboto\\\",sans-serif;font-weight:300;}@media screen and (min-width: \",props=>props.breakpoints.tablet,\"){align-items:flex-start;justify-content:flex-start;align-content:flex-start;text-aligh:left;padding-left:0;}input{margin-left:0;}\"+( false?undefined:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\"));const NavContainer=Object(frontity__WEBPACK_IMPORTED_MODULE_4__[\"styled\"])(\"div\", false?undefined:{target:\"edqvzzy9\",label:\"NavContainer\"})(\"display:flex;flex-direction:column;align-items:center;padding-top:4em;margin:auto;img{width:80%;height:auto;}p{margin-block-start:0em;padding:0em 1em;text-align:center;font-weight:300;}@media screen and (min-width: \",props=>props.breakpoints.tablet,\"){display:flex;flex-direction:row-reverse;align-items:center;justify-content:space-between;align-self:center;padding:4em 2em 0em 2em;img{width:50%;height:auto;}p{text-align:left;font-weight:300;padding:0;}h1{text-align:left;padding-top:0;}@media screen and (min-width: \",props=>props.breakpoints.web,\"){img{position:relative;width:60%;right:-5em;}}}\"+( false?undefined:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\"));const HeaderDescription=Object(frontity__WEBPACK_IMPORTED_MODULE_4__[\"styled\"])(\"h1\", false?undefined:{target:\"edqvzzy8\",label:\"HeaderDescription\"})( false?undefined:{name:\"1xbulqx\",styles:\"padding-top:1em;text-align:center\",map:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",toString:_EMOTION_STRINGIFIED_CSS_ERROR__});// ------------------Landing Page------------------\nconst LessonContainerDiv=Object(frontity__WEBPACK_IMPORTED_MODULE_4__[\"styled\"])(\"div\", false?undefined:{target:\"edqvzzy7\",label:\"LessonContainerDiv\"})(\"display:flex;flex-direction:column;justify-content:center;align-items:center;width:100%;padding:2em 0em;@media screen and (min-width: \",props=>props.breakpoints.mobile,\"){display:grid;grid-template-columns:auto auto;grid-template-rows:auto auto;justify-items:center;align-items:center;}@media screen and (min-width: \",props=>props.breakpoints.tablet,\"){width:100%;display:flex;flex-direction:row;justify-content:space-evenly;}@media screen and (min-width: \",props=>props.breakpoints.web,\"){width:100%;flex-direction:row;justify-content:space-between;}\"+( false?undefined:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\"));const LessonContainer=Object(frontity__WEBPACK_IMPORTED_MODULE_4__[\"styled\"])(\"div\", false?undefined:{target:\"edqvzzy6\",label:\"LessonContainer\"})( false?undefined:{name:\"1cwdmup\",styles:\"width:100%;margin-top:30%;background:var(--secondary-background-colour);padding:4em 0em 2em 0em;display:flex;flex-direction:column;align-items:center;>p{text-transform:uppercase;text-align:center;font-size:0.8em;font-weight:500;margin-block-end:0em;}>h3{text-align:center;margin-block-start:0em;}\",map:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",toString:_EMOTION_STRINGIFIED_CSS_ERROR__});const DescriptionPanel=Object(frontity__WEBPACK_IMPORTED_MODULE_4__[\"styled\"])(\"div\", false?undefined:{target:\"edqvzzy5\",label:\"DescriptionPanel\"})(\"padding:1em 0em;width:30%;text-align:center;p{font-weight:300;}h4{margin-block-end:0em;}@media screen and (min-width: \",props=>props.breakpoints.smallMobile,\"){width:30%;}@media screen and (min-width: \",props=>props.breakpoints.mobile,\"){width:60%;}@media screen and (min-width: \",props=>props.breakpoints.tablet,\"){width:13%;}@media screen and (min-width: \",props=>props.breakpoints.web,\"){width:60%;}\"+( false?undefined:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\"));// ------------------Courses Container------------------\nconst ButtonContainer=Object(frontity__WEBPACK_IMPORTED_MODULE_4__[\"styled\"])(\"div\", false?undefined:{target:\"edqvzzy4\",label:\"ButtonContainer\"})( false?undefined:{name:\"g82ggk\",styles:\"justify-content:center;padding:3em 0em 6em 0em;width:100%;display:flex;button{margin:0em 1em;}\",map:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",toString:_EMOTION_STRINGIFIED_CSS_ERROR__});const CourseDiv=Object(frontity__WEBPACK_IMPORTED_MODULE_4__[\"styled\"])(\"div\", false?undefined:{target:\"edqvzzy3\",label:\"CourseDiv\"})( false?undefined:{name:\"ia6mie\",styles:\"display:flex;flex-direction:column;align-items:center;margin:3em 3em 4em 3em;h2,p{text-align:center;}h2{margin-block-end:0em;margin-block-start:1.5em;}p{font-weight:300;}\",map:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",toString:_EMOTION_STRINGIFIED_CSS_ERROR__});// ------------------Author Container------------------\nconst AuthorAvatar=Object(frontity__WEBPACK_IMPORTED_MODULE_4__[\"styled\"])(\"div\", false?undefined:{target:\"edqvzzy2\",label:\"AuthorAvatar\"})( false?undefined:{name:\"tmsvx6\",styles:\"height:200px;width:200px;border-radius:100%;overflow:hidden;img{position:relative;object-fit:cover;left:-35px;width:auto;height:100%;}\",map:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",toString:_EMOTION_STRINGIFIED_CSS_ERROR__});const AuthorContainer=Object(frontity__WEBPACK_IMPORTED_MODULE_4__[\"styled\"])(\"div\", false?undefined:{target:\"edqvzzy1\",label:\"AuthorContainer\"})( false?undefined:{name:\"mmf8ju\",styles:\"display:flex;padding:2em 2em;flex-direction:column;align-items:center;background:var(--secondary-background-colour);p{text-align:center;font-weight:300;}h2{text-align:center;margin-block-start:1.5em;margin-block-end:0.5em;}button{margin:2em 0em;}\",map:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",toString:_EMOTION_STRINGIFIED_CSS_ERROR__});const SocialContainer=Object(frontity__WEBPACK_IMPORTED_MODULE_4__[\"styled\"])(\"div\", false?undefined:{target:\"edqvzzy0\",label:\"SocialContainer\"})(\"display:flex;width:100%;flex-direction:row;justify-content:center;align-items:baseline;a{margin:3em 2em;@media screen and (max-width: \",props=>props.breakpoints.smallMobile,\"){margin:3em 1em;}}\"+( false?undefined:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\"));/* harmony default export */ __webpack_exports__[\"default\"] = (Object(frontity__WEBPACK_IMPORTED_MODULE_4__[\"connect\"])(Home));//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./packages/thp-theme/src/components /home.js\n");

/***/ })

})